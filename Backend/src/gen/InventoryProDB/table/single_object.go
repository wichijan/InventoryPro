//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SingleObject = newSingleObjectTable("InventoryProDB", "single_object", "")

type singleObjectTable struct {
	mysql.Table

	// Columns
	ItemID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type SingleObjectTable struct {
	singleObjectTable

	NEW singleObjectTable
}

// AS creates new SingleObjectTable with assigned alias
func (a SingleObjectTable) AS(alias string) *SingleObjectTable {
	return newSingleObjectTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SingleObjectTable with assigned schema name
func (a SingleObjectTable) FromSchema(schemaName string) *SingleObjectTable {
	return newSingleObjectTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SingleObjectTable with assigned table prefix
func (a SingleObjectTable) WithPrefix(prefix string) *SingleObjectTable {
	return newSingleObjectTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SingleObjectTable with assigned table suffix
func (a SingleObjectTable) WithSuffix(suffix string) *SingleObjectTable {
	return newSingleObjectTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSingleObjectTable(schemaName, tableName, alias string) *SingleObjectTable {
	return &SingleObjectTable{
		singleObjectTable: newSingleObjectTableImpl(schemaName, tableName, alias),
		NEW:               newSingleObjectTableImpl("", "new", ""),
	}
}

func newSingleObjectTableImpl(schemaName, tableName, alias string) singleObjectTable {
	var (
		ItemIDColumn   = mysql.StringColumn("item_id")
		allColumns     = mysql.ColumnList{ItemIDColumn}
		mutableColumns = mysql.ColumnList{}
	)

	return singleObjectTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ItemID: ItemIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
