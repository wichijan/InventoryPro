//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var RegistrationCodes = newRegistrationCodesTable("InventoryProDB", "registration_codes", "")

type registrationCodesTable struct {
	mysql.Table

	// Columns
	UserID mysql.ColumnString
	Code   mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type RegistrationCodesTable struct {
	registrationCodesTable

	NEW registrationCodesTable
}

// AS creates new RegistrationCodesTable with assigned alias
func (a RegistrationCodesTable) AS(alias string) *RegistrationCodesTable {
	return newRegistrationCodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RegistrationCodesTable with assigned schema name
func (a RegistrationCodesTable) FromSchema(schemaName string) *RegistrationCodesTable {
	return newRegistrationCodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RegistrationCodesTable with assigned table prefix
func (a RegistrationCodesTable) WithPrefix(prefix string) *RegistrationCodesTable {
	return newRegistrationCodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RegistrationCodesTable with assigned table suffix
func (a RegistrationCodesTable) WithSuffix(suffix string) *RegistrationCodesTable {
	return newRegistrationCodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRegistrationCodesTable(schemaName, tableName, alias string) *RegistrationCodesTable {
	return &RegistrationCodesTable{
		registrationCodesTable: newRegistrationCodesTableImpl(schemaName, tableName, alias),
		NEW:                    newRegistrationCodesTableImpl("", "new", ""),
	}
}

func newRegistrationCodesTableImpl(schemaName, tableName, alias string) registrationCodesTable {
	var (
		UserIDColumn   = mysql.StringColumn("user_id")
		CodeColumn     = mysql.StringColumn("code")
		allColumns     = mysql.ColumnList{UserIDColumn, CodeColumn}
		mutableColumns = mysql.ColumnList{CodeColumn}
	)

	return registrationCodesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID: UserIDColumn,
		Code:   CodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
