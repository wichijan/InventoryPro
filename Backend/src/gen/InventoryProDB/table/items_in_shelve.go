//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItemsInShelve = newItemsInShelveTable("InventoryProDB", "items_in_shelve", "")

type itemsInShelveTable struct {
	mysql.Table

	// Columns
	ItemID   mysql.ColumnString
	ShelveID mysql.ColumnString
	Quantity mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ItemsInShelveTable struct {
	itemsInShelveTable

	NEW itemsInShelveTable
}

// AS creates new ItemsInShelveTable with assigned alias
func (a ItemsInShelveTable) AS(alias string) *ItemsInShelveTable {
	return newItemsInShelveTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemsInShelveTable with assigned schema name
func (a ItemsInShelveTable) FromSchema(schemaName string) *ItemsInShelveTable {
	return newItemsInShelveTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemsInShelveTable with assigned table prefix
func (a ItemsInShelveTable) WithPrefix(prefix string) *ItemsInShelveTable {
	return newItemsInShelveTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemsInShelveTable with assigned table suffix
func (a ItemsInShelveTable) WithSuffix(suffix string) *ItemsInShelveTable {
	return newItemsInShelveTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemsInShelveTable(schemaName, tableName, alias string) *ItemsInShelveTable {
	return &ItemsInShelveTable{
		itemsInShelveTable: newItemsInShelveTableImpl(schemaName, tableName, alias),
		NEW:                newItemsInShelveTableImpl("", "new", ""),
	}
}

func newItemsInShelveTableImpl(schemaName, tableName, alias string) itemsInShelveTable {
	var (
		ItemIDColumn   = mysql.StringColumn("item_id")
		ShelveIDColumn = mysql.StringColumn("shelve_id")
		QuantityColumn = mysql.IntegerColumn("quantity")
		allColumns     = mysql.ColumnList{ItemIDColumn, ShelveIDColumn, QuantityColumn}
		mutableColumns = mysql.ColumnList{QuantityColumn}
	)

	return itemsInShelveTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ItemID:   ItemIDColumn,
		ShelveID: ShelveIDColumn,
		Quantity: QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
