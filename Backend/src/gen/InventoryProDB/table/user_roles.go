//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UserRoles = newUserRolesTable("InventoryProDB", "user_roles", "")

type userRolesTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnString
	UserID mysql.ColumnString
	RoleID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UserRolesTable struct {
	userRolesTable

	NEW userRolesTable
}

// AS creates new UserRolesTable with assigned alias
func (a UserRolesTable) AS(alias string) *UserRolesTable {
	return newUserRolesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserRolesTable with assigned schema name
func (a UserRolesTable) FromSchema(schemaName string) *UserRolesTable {
	return newUserRolesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserRolesTable with assigned table prefix
func (a UserRolesTable) WithPrefix(prefix string) *UserRolesTable {
	return newUserRolesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserRolesTable with assigned table suffix
func (a UserRolesTable) WithSuffix(suffix string) *UserRolesTable {
	return newUserRolesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserRolesTable(schemaName, tableName, alias string) *UserRolesTable {
	return &UserRolesTable{
		userRolesTable: newUserRolesTableImpl(schemaName, tableName, alias),
		NEW:            newUserRolesTableImpl("", "new", ""),
	}
}

func newUserRolesTableImpl(schemaName, tableName, alias string) userRolesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		UserIDColumn   = mysql.StringColumn("user_id")
		RoleIDColumn   = mysql.StringColumn("role_id")
		allColumns     = mysql.ColumnList{IDColumn, UserIDColumn, RoleIDColumn}
		mutableColumns = mysql.ColumnList{UserIDColumn, RoleIDColumn}
	)

	return userRolesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		UserID: UserIDColumn,
		RoleID: RoleIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
