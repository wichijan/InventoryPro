//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItemsInShelf = newItemsInShelfTable("InventoryProDB", "items_in_shelf", "")

type itemsInShelfTable struct {
	mysql.Table

	// Columns
	ItemID   mysql.ColumnString
	ShelfID  mysql.ColumnString
	Quantity mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ItemsInShelfTable struct {
	itemsInShelfTable

	NEW itemsInShelfTable
}

// AS creates new ItemsInShelfTable with assigned alias
func (a ItemsInShelfTable) AS(alias string) *ItemsInShelfTable {
	return newItemsInShelfTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemsInShelfTable with assigned schema name
func (a ItemsInShelfTable) FromSchema(schemaName string) *ItemsInShelfTable {
	return newItemsInShelfTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemsInShelfTable with assigned table prefix
func (a ItemsInShelfTable) WithPrefix(prefix string) *ItemsInShelfTable {
	return newItemsInShelfTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemsInShelfTable with assigned table suffix
func (a ItemsInShelfTable) WithSuffix(suffix string) *ItemsInShelfTable {
	return newItemsInShelfTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemsInShelfTable(schemaName, tableName, alias string) *ItemsInShelfTable {
	return &ItemsInShelfTable{
		itemsInShelfTable: newItemsInShelfTableImpl(schemaName, tableName, alias),
		NEW:               newItemsInShelfTableImpl("", "new", ""),
	}
}

func newItemsInShelfTableImpl(schemaName, tableName, alias string) itemsInShelfTable {
	var (
		ItemIDColumn   = mysql.StringColumn("item_id")
		ShelfIDColumn  = mysql.StringColumn("shelf_id")
		QuantityColumn = mysql.IntegerColumn("quantity")
		allColumns     = mysql.ColumnList{ItemIDColumn, ShelfIDColumn, QuantityColumn}
		mutableColumns = mysql.ColumnList{QuantityColumn}
	)

	return itemsInShelfTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ItemID:   ItemIDColumn,
		ShelfID:  ShelfIDColumn,
		Quantity: QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
