//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UserItems = newUserItemsTable("InventoryProDB", "user_items", "")

type userItemsTable struct {
	mysql.Table

	// Columns
	UserID          mysql.ColumnString
	ItemID          mysql.ColumnString
	Quantity        mysql.ColumnInteger
	TransactionDate mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UserItemsTable struct {
	userItemsTable

	NEW userItemsTable
}

// AS creates new UserItemsTable with assigned alias
func (a UserItemsTable) AS(alias string) *UserItemsTable {
	return newUserItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserItemsTable with assigned schema name
func (a UserItemsTable) FromSchema(schemaName string) *UserItemsTable {
	return newUserItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserItemsTable with assigned table prefix
func (a UserItemsTable) WithPrefix(prefix string) *UserItemsTable {
	return newUserItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserItemsTable with assigned table suffix
func (a UserItemsTable) WithSuffix(suffix string) *UserItemsTable {
	return newUserItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserItemsTable(schemaName, tableName, alias string) *UserItemsTable {
	return &UserItemsTable{
		userItemsTable: newUserItemsTableImpl(schemaName, tableName, alias),
		NEW:            newUserItemsTableImpl("", "new", ""),
	}
}

func newUserItemsTableImpl(schemaName, tableName, alias string) userItemsTable {
	var (
		UserIDColumn          = mysql.StringColumn("user_id")
		ItemIDColumn          = mysql.StringColumn("item_id")
		QuantityColumn        = mysql.IntegerColumn("quantity")
		TransactionDateColumn = mysql.TimestampColumn("transaction_date")
		allColumns            = mysql.ColumnList{UserIDColumn, ItemIDColumn, QuantityColumn, TransactionDateColumn}
		mutableColumns        = mysql.ColumnList{QuantityColumn, TransactionDateColumn}
	)

	return userItemsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:          UserIDColumn,
		ItemID:          ItemIDColumn,
		Quantity:        QuantityColumn,
		TransactionDate: TransactionDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
