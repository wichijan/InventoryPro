//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UserTypes = newUserTypesTable("InventoryProDB", "user_types", "")

type userTypesTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnString
	TypeName mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UserTypesTable struct {
	userTypesTable

	NEW userTypesTable
}

// AS creates new UserTypesTable with assigned alias
func (a UserTypesTable) AS(alias string) *UserTypesTable {
	return newUserTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTypesTable with assigned schema name
func (a UserTypesTable) FromSchema(schemaName string) *UserTypesTable {
	return newUserTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTypesTable with assigned table prefix
func (a UserTypesTable) WithPrefix(prefix string) *UserTypesTable {
	return newUserTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTypesTable with assigned table suffix
func (a UserTypesTable) WithSuffix(suffix string) *UserTypesTable {
	return newUserTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTypesTable(schemaName, tableName, alias string) *UserTypesTable {
	return &UserTypesTable{
		userTypesTable: newUserTypesTableImpl(schemaName, tableName, alias),
		NEW:            newUserTypesTableImpl("", "new", ""),
	}
}

func newUserTypesTableImpl(schemaName, tableName, alias string) userTypesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		TypeNameColumn = mysql.StringColumn("type_name")
		allColumns     = mysql.ColumnList{IDColumn, TypeNameColumn}
		mutableColumns = mysql.ColumnList{TypeNameColumn}
	)

	return userTypesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		TypeName: TypeNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
