//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Items = newItemsTable("InventoryProDB", "items", "")

type itemsTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnString
	ItemTypeID         mysql.ColumnString
	Name               mysql.ColumnString
	Description        mysql.ColumnString
	RegularShelfID     mysql.ColumnString
	ClassOne           mysql.ColumnBool
	ClassTwo           mysql.ColumnBool
	ClassThree         mysql.ColumnBool
	ClassFour          mysql.ColumnBool
	Damaged            mysql.ColumnBool
	DamagedDescription mysql.ColumnString
	Picture            mysql.ColumnString
	HintText           mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ItemsTable struct {
	itemsTable

	NEW itemsTable
}

// AS creates new ItemsTable with assigned alias
func (a ItemsTable) AS(alias string) *ItemsTable {
	return newItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemsTable with assigned schema name
func (a ItemsTable) FromSchema(schemaName string) *ItemsTable {
	return newItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemsTable with assigned table prefix
func (a ItemsTable) WithPrefix(prefix string) *ItemsTable {
	return newItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemsTable with assigned table suffix
func (a ItemsTable) WithSuffix(suffix string) *ItemsTable {
	return newItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemsTable(schemaName, tableName, alias string) *ItemsTable {
	return &ItemsTable{
		itemsTable: newItemsTableImpl(schemaName, tableName, alias),
		NEW:        newItemsTableImpl("", "new", ""),
	}
}

func newItemsTableImpl(schemaName, tableName, alias string) itemsTable {
	var (
		IDColumn                 = mysql.StringColumn("id")
		ItemTypeIDColumn         = mysql.StringColumn("item_type_id")
		NameColumn               = mysql.StringColumn("name")
		DescriptionColumn        = mysql.StringColumn("description")
		RegularShelfIDColumn     = mysql.StringColumn("regular_shelf_id")
		ClassOneColumn           = mysql.BoolColumn("class_one")
		ClassTwoColumn           = mysql.BoolColumn("class_two")
		ClassThreeColumn         = mysql.BoolColumn("class_three")
		ClassFourColumn          = mysql.BoolColumn("class_four")
		DamagedColumn            = mysql.BoolColumn("damaged")
		DamagedDescriptionColumn = mysql.StringColumn("damaged_description")
		PictureColumn            = mysql.StringColumn("picture")
		HintTextColumn           = mysql.StringColumn("hint_text")
		allColumns               = mysql.ColumnList{IDColumn, ItemTypeIDColumn, NameColumn, DescriptionColumn, RegularShelfIDColumn, ClassOneColumn, ClassTwoColumn, ClassThreeColumn, ClassFourColumn, DamagedColumn, DamagedDescriptionColumn, PictureColumn, HintTextColumn}
		mutableColumns           = mysql.ColumnList{ItemTypeIDColumn, NameColumn, DescriptionColumn, RegularShelfIDColumn, ClassOneColumn, ClassTwoColumn, ClassThreeColumn, ClassFourColumn, DamagedColumn, DamagedDescriptionColumn, PictureColumn, HintTextColumn}
	)

	return itemsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		ItemTypeID:         ItemTypeIDColumn,
		Name:               NameColumn,
		Description:        DescriptionColumn,
		RegularShelfID:     RegularShelfIDColumn,
		ClassOne:           ClassOneColumn,
		ClassTwo:           ClassTwoColumn,
		ClassThree:         ClassThreeColumn,
		ClassFour:          ClassFourColumn,
		Damaged:            DamagedColumn,
		DamagedDescription: DamagedDescriptionColumn,
		Picture:            PictureColumn,
		HintText:           HintTextColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
