//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ShelveTypes = newShelveTypesTable("InventoryProDB", "shelve_types", "")

type shelveTypesTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnString
	TypeName mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ShelveTypesTable struct {
	shelveTypesTable

	NEW shelveTypesTable
}

// AS creates new ShelveTypesTable with assigned alias
func (a ShelveTypesTable) AS(alias string) *ShelveTypesTable {
	return newShelveTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShelveTypesTable with assigned schema name
func (a ShelveTypesTable) FromSchema(schemaName string) *ShelveTypesTable {
	return newShelveTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShelveTypesTable with assigned table prefix
func (a ShelveTypesTable) WithPrefix(prefix string) *ShelveTypesTable {
	return newShelveTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShelveTypesTable with assigned table suffix
func (a ShelveTypesTable) WithSuffix(suffix string) *ShelveTypesTable {
	return newShelveTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShelveTypesTable(schemaName, tableName, alias string) *ShelveTypesTable {
	return &ShelveTypesTable{
		shelveTypesTable: newShelveTypesTableImpl(schemaName, tableName, alias),
		NEW:              newShelveTypesTableImpl("", "new", ""),
	}
}

func newShelveTypesTableImpl(schemaName, tableName, alias string) shelveTypesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		TypeNameColumn = mysql.StringColumn("type_name")
		allColumns     = mysql.ColumnList{IDColumn, TypeNameColumn}
		mutableColumns = mysql.ColumnList{TypeNameColumn}
	)

	return shelveTypesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		TypeName: TypeNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
