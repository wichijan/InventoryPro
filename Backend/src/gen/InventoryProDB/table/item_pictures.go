//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItemPictures = newItemPicturesTable("InventoryProDB", "item_pictures", "")

type itemPicturesTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnString
	Picture mysql.ColumnString
	ItemID  mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ItemPicturesTable struct {
	itemPicturesTable

	NEW itemPicturesTable
}

// AS creates new ItemPicturesTable with assigned alias
func (a ItemPicturesTable) AS(alias string) *ItemPicturesTable {
	return newItemPicturesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemPicturesTable with assigned schema name
func (a ItemPicturesTable) FromSchema(schemaName string) *ItemPicturesTable {
	return newItemPicturesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemPicturesTable with assigned table prefix
func (a ItemPicturesTable) WithPrefix(prefix string) *ItemPicturesTable {
	return newItemPicturesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemPicturesTable with assigned table suffix
func (a ItemPicturesTable) WithSuffix(suffix string) *ItemPicturesTable {
	return newItemPicturesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemPicturesTable(schemaName, tableName, alias string) *ItemPicturesTable {
	return &ItemPicturesTable{
		itemPicturesTable: newItemPicturesTableImpl(schemaName, tableName, alias),
		NEW:               newItemPicturesTableImpl("", "new", ""),
	}
}

func newItemPicturesTableImpl(schemaName, tableName, alias string) itemPicturesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		PictureColumn  = mysql.StringColumn("picture")
		ItemIDColumn   = mysql.StringColumn("item_id")
		allColumns     = mysql.ColumnList{IDColumn, PictureColumn, ItemIDColumn}
		mutableColumns = mysql.ColumnList{PictureColumn, ItemIDColumn}
	)

	return itemPicturesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Picture: PictureColumn,
		ItemID:  ItemIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
