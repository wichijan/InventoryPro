//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SetsOfObjects = newSetsOfObjectsTable("InventoryProDB", "sets_of_objects", "")

type setsOfObjectsTable struct {
	mysql.Table

	// Columns
	ItemID        mysql.ColumnString
	TotalObjects  mysql.ColumnInteger
	UsefulObjects mysql.ColumnInteger
	BrokenObjects mysql.ColumnInteger
	LostObjects   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type SetsOfObjectsTable struct {
	setsOfObjectsTable

	NEW setsOfObjectsTable
}

// AS creates new SetsOfObjectsTable with assigned alias
func (a SetsOfObjectsTable) AS(alias string) *SetsOfObjectsTable {
	return newSetsOfObjectsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SetsOfObjectsTable with assigned schema name
func (a SetsOfObjectsTable) FromSchema(schemaName string) *SetsOfObjectsTable {
	return newSetsOfObjectsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SetsOfObjectsTable with assigned table prefix
func (a SetsOfObjectsTable) WithPrefix(prefix string) *SetsOfObjectsTable {
	return newSetsOfObjectsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SetsOfObjectsTable with assigned table suffix
func (a SetsOfObjectsTable) WithSuffix(suffix string) *SetsOfObjectsTable {
	return newSetsOfObjectsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSetsOfObjectsTable(schemaName, tableName, alias string) *SetsOfObjectsTable {
	return &SetsOfObjectsTable{
		setsOfObjectsTable: newSetsOfObjectsTableImpl(schemaName, tableName, alias),
		NEW:                newSetsOfObjectsTableImpl("", "new", ""),
	}
}

func newSetsOfObjectsTableImpl(schemaName, tableName, alias string) setsOfObjectsTable {
	var (
		ItemIDColumn        = mysql.StringColumn("item_id")
		TotalObjectsColumn  = mysql.IntegerColumn("total_objects")
		UsefulObjectsColumn = mysql.IntegerColumn("useful_objects")
		BrokenObjectsColumn = mysql.IntegerColumn("broken_objects")
		LostObjectsColumn   = mysql.IntegerColumn("lost_objects")
		allColumns          = mysql.ColumnList{ItemIDColumn, TotalObjectsColumn, UsefulObjectsColumn, BrokenObjectsColumn, LostObjectsColumn}
		mutableColumns      = mysql.ColumnList{TotalObjectsColumn, UsefulObjectsColumn, BrokenObjectsColumn, LostObjectsColumn}
	)

	return setsOfObjectsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ItemID:        ItemIDColumn,
		TotalObjects:  TotalObjectsColumn,
		UsefulObjects: UsefulObjectsColumn,
		BrokenObjects: BrokenObjectsColumn,
		LostObjects:   LostObjectsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
