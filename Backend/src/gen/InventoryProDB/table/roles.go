//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Roles = newRolesTable("InventoryProDB", "roles", "")

type rolesTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnString
	RoleName mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type RolesTable struct {
	rolesTable

	NEW rolesTable
}

// AS creates new RolesTable with assigned alias
func (a RolesTable) AS(alias string) *RolesTable {
	return newRolesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RolesTable with assigned schema name
func (a RolesTable) FromSchema(schemaName string) *RolesTable {
	return newRolesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RolesTable with assigned table prefix
func (a RolesTable) WithPrefix(prefix string) *RolesTable {
	return newRolesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RolesTable with assigned table suffix
func (a RolesTable) WithSuffix(suffix string) *RolesTable {
	return newRolesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRolesTable(schemaName, tableName, alias string) *RolesTable {
	return &RolesTable{
		rolesTable: newRolesTableImpl(schemaName, tableName, alias),
		NEW:        newRolesTableImpl("", "new", ""),
	}
}

func newRolesTableImpl(schemaName, tableName, alias string) rolesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		RoleNameColumn = mysql.StringColumn("role_name")
		allColumns     = mysql.ColumnList{IDColumn, RoleNameColumn}
		mutableColumns = mysql.ColumnList{RoleNameColumn}
	)

	return rolesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		RoleName: RoleNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
