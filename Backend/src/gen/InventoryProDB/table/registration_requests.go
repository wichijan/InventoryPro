//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var RegistrationRequests = newRegistrationRequestsTable("InventoryProDB", "registration_requests", "")

type registrationRequestsTable struct {
	mysql.Table

	// Columns
	UserID      mysql.ColumnString
	RequestTime mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type RegistrationRequestsTable struct {
	registrationRequestsTable

	NEW registrationRequestsTable
}

// AS creates new RegistrationRequestsTable with assigned alias
func (a RegistrationRequestsTable) AS(alias string) *RegistrationRequestsTable {
	return newRegistrationRequestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RegistrationRequestsTable with assigned schema name
func (a RegistrationRequestsTable) FromSchema(schemaName string) *RegistrationRequestsTable {
	return newRegistrationRequestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RegistrationRequestsTable with assigned table prefix
func (a RegistrationRequestsTable) WithPrefix(prefix string) *RegistrationRequestsTable {
	return newRegistrationRequestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RegistrationRequestsTable with assigned table suffix
func (a RegistrationRequestsTable) WithSuffix(suffix string) *RegistrationRequestsTable {
	return newRegistrationRequestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRegistrationRequestsTable(schemaName, tableName, alias string) *RegistrationRequestsTable {
	return &RegistrationRequestsTable{
		registrationRequestsTable: newRegistrationRequestsTableImpl(schemaName, tableName, alias),
		NEW:                       newRegistrationRequestsTableImpl("", "new", ""),
	}
}

func newRegistrationRequestsTableImpl(schemaName, tableName, alias string) registrationRequestsTable {
	var (
		UserIDColumn      = mysql.StringColumn("user_id")
		RequestTimeColumn = mysql.TimestampColumn("request_time")
		allColumns        = mysql.ColumnList{UserIDColumn, RequestTimeColumn}
		mutableColumns    = mysql.ColumnList{RequestTimeColumn}
	)

	return registrationRequestsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:      UserIDColumn,
		RequestTime: RequestTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
