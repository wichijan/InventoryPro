//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Books = newBooksTable("InventoryProDB", "books", "")

type booksTable struct {
	mysql.Table

	// Columns
	ItemID    mysql.ColumnString
	Isbn      mysql.ColumnString
	Author    mysql.ColumnString
	Publisher mysql.ColumnString
	Edition   mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type BooksTable struct {
	booksTable

	NEW booksTable
}

// AS creates new BooksTable with assigned alias
func (a BooksTable) AS(alias string) *BooksTable {
	return newBooksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BooksTable with assigned schema name
func (a BooksTable) FromSchema(schemaName string) *BooksTable {
	return newBooksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BooksTable with assigned table prefix
func (a BooksTable) WithPrefix(prefix string) *BooksTable {
	return newBooksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BooksTable with assigned table suffix
func (a BooksTable) WithSuffix(suffix string) *BooksTable {
	return newBooksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBooksTable(schemaName, tableName, alias string) *BooksTable {
	return &BooksTable{
		booksTable: newBooksTableImpl(schemaName, tableName, alias),
		NEW:        newBooksTableImpl("", "new", ""),
	}
}

func newBooksTableImpl(schemaName, tableName, alias string) booksTable {
	var (
		ItemIDColumn    = mysql.StringColumn("item_id")
		IsbnColumn      = mysql.StringColumn("ISBN")
		AuthorColumn    = mysql.StringColumn("author")
		PublisherColumn = mysql.StringColumn("publisher")
		EditionColumn   = mysql.StringColumn("edition")
		allColumns      = mysql.ColumnList{ItemIDColumn, IsbnColumn, AuthorColumn, PublisherColumn, EditionColumn}
		mutableColumns  = mysql.ColumnList{IsbnColumn, AuthorColumn, PublisherColumn, EditionColumn}
	)

	return booksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ItemID:    ItemIDColumn,
		Isbn:      IsbnColumn,
		Author:    AuthorColumn,
		Publisher: PublisherColumn,
		Edition:   EditionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
