//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Keywords = newKeywordsTable("InventoryProDB", "keywords", "")

type keywordsTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnString
	Keyword mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type KeywordsTable struct {
	keywordsTable

	NEW keywordsTable
}

// AS creates new KeywordsTable with assigned alias
func (a KeywordsTable) AS(alias string) *KeywordsTable {
	return newKeywordsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new KeywordsTable with assigned schema name
func (a KeywordsTable) FromSchema(schemaName string) *KeywordsTable {
	return newKeywordsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new KeywordsTable with assigned table prefix
func (a KeywordsTable) WithPrefix(prefix string) *KeywordsTable {
	return newKeywordsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new KeywordsTable with assigned table suffix
func (a KeywordsTable) WithSuffix(suffix string) *KeywordsTable {
	return newKeywordsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newKeywordsTable(schemaName, tableName, alias string) *KeywordsTable {
	return &KeywordsTable{
		keywordsTable: newKeywordsTableImpl(schemaName, tableName, alias),
		NEW:           newKeywordsTableImpl("", "new", ""),
	}
}

func newKeywordsTableImpl(schemaName, tableName, alias string) keywordsTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		KeywordColumn  = mysql.StringColumn("keyword")
		allColumns     = mysql.ColumnList{IDColumn, KeywordColumn}
		mutableColumns = mysql.ColumnList{KeywordColumn}
	)

	return keywordsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Keyword: KeywordColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
