//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Transactions = newTransactionsTable("InventoryProDB", "transactions", "")

type transactionsTable struct {
	mysql.Table

	// Columns
	TransactionID   mysql.ColumnString
	ItemID          mysql.ColumnString
	UserID          mysql.ColumnString
	TransactionType mysql.ColumnString
	TargetUserID    mysql.ColumnString
	OriginUserID    mysql.ColumnString
	TransactionDate mysql.ColumnTimestamp
	Note            mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TransactionsTable struct {
	transactionsTable

	NEW transactionsTable
}

// AS creates new TransactionsTable with assigned alias
func (a TransactionsTable) AS(alias string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionsTable with assigned schema name
func (a TransactionsTable) FromSchema(schemaName string) *TransactionsTable {
	return newTransactionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionsTable with assigned table prefix
func (a TransactionsTable) WithPrefix(prefix string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionsTable with assigned table suffix
func (a TransactionsTable) WithSuffix(suffix string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionsTable(schemaName, tableName, alias string) *TransactionsTable {
	return &TransactionsTable{
		transactionsTable: newTransactionsTableImpl(schemaName, tableName, alias),
		NEW:               newTransactionsTableImpl("", "new", ""),
	}
}

func newTransactionsTableImpl(schemaName, tableName, alias string) transactionsTable {
	var (
		TransactionIDColumn   = mysql.StringColumn("transaction_id")
		ItemIDColumn          = mysql.StringColumn("item_id")
		UserIDColumn          = mysql.StringColumn("user_id")
		TransactionTypeColumn = mysql.StringColumn("transaction_type")
		TargetUserIDColumn    = mysql.StringColumn("target_user_id")
		OriginUserIDColumn    = mysql.StringColumn("origin_user_id")
		TransactionDateColumn = mysql.TimestampColumn("transaction_date")
		NoteColumn            = mysql.StringColumn("note")
		allColumns            = mysql.ColumnList{TransactionIDColumn, ItemIDColumn, UserIDColumn, TransactionTypeColumn, TargetUserIDColumn, OriginUserIDColumn, TransactionDateColumn, NoteColumn}
		mutableColumns        = mysql.ColumnList{ItemIDColumn, UserIDColumn, TransactionTypeColumn, TargetUserIDColumn, OriginUserIDColumn, TransactionDateColumn, NoteColumn}
	)

	return transactionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TransactionID:   TransactionIDColumn,
		ItemID:          ItemIDColumn,
		UserID:          UserIDColumn,
		TransactionType: TransactionTypeColumn,
		TargetUserID:    TargetUserIDColumn,
		OriginUserID:    OriginUserIDColumn,
		TransactionDate: TransactionDateColumn,
		Note:            NoteColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
