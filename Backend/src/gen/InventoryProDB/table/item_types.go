//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItemTypes = newItemTypesTable("InventoryProDB", "item_types", "")

type itemTypesTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnString
	TypeName mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ItemTypesTable struct {
	itemTypesTable

	NEW itemTypesTable
}

// AS creates new ItemTypesTable with assigned alias
func (a ItemTypesTable) AS(alias string) *ItemTypesTable {
	return newItemTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemTypesTable with assigned schema name
func (a ItemTypesTable) FromSchema(schemaName string) *ItemTypesTable {
	return newItemTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemTypesTable with assigned table prefix
func (a ItemTypesTable) WithPrefix(prefix string) *ItemTypesTable {
	return newItemTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemTypesTable with assigned table suffix
func (a ItemTypesTable) WithSuffix(suffix string) *ItemTypesTable {
	return newItemTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemTypesTable(schemaName, tableName, alias string) *ItemTypesTable {
	return &ItemTypesTable{
		itemTypesTable: newItemTypesTableImpl(schemaName, tableName, alias),
		NEW:            newItemTypesTableImpl("", "new", ""),
	}
}

func newItemTypesTableImpl(schemaName, tableName, alias string) itemTypesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		TypeNameColumn = mysql.StringColumn("type_name")
		allColumns     = mysql.ColumnList{IDColumn, TypeNameColumn}
		mutableColumns = mysql.ColumnList{TypeNameColumn}
	)

	return itemTypesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		TypeName: TypeNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
