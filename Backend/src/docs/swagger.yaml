definitions:
  model.Books:
    properties:
      author:
        type: string
      edition:
        type: string
      isbn:
        type: string
      itemID:
        type: string
      publisher:
        type: string
    type: object
  model.ItemsItemTypes:
    enum:
    - book
    - single_object
    - set_of_objects
    type: string
    x-enum-varnames:
    - ItemsItemTypes_Book
    - ItemsItemTypes_SingleObject
    - ItemsItemTypes_SetOfObjects
  model.Keywords:
    properties:
      id:
        type: string
      keyword:
        type: string
    type: object
  model.QuickShelves:
    properties:
      name:
        type: string
      quickShelfID:
        type: string
      roomID:
        type: string
    type: object
  model.RegistrationRequests:
    properties:
      requestTime:
        type: string
      userID:
        type: string
    type: object
  model.Roles:
    properties:
      id:
        type: string
      roleName:
        type: string
    type: object
  model.Rooms:
    properties:
      id:
        type: string
      name:
        type: string
      warehouseID:
        type: string
    type: object
  model.SetsOfObjects:
    properties:
      brokenObjects:
        type: integer
      itemID:
        type: string
      lostObjects:
        type: integer
      totalObjects:
        type: integer
      usefulObjects:
        type: integer
    type: object
  model.Shelves:
    properties:
      id:
        type: string
      name:
        type: string
      roomID:
        type: string
    type: object
  model.SingleObject:
    properties:
      itemID:
        type: string
    type: object
  model.Subjects:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  model.UserTypes:
    properties:
      id:
        type: string
      typeName:
        type: string
    type: object
  model.Warehouses:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  models.CheckEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.CheckUsernameRequest:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  models.GetQuickShelf:
    properties:
      items:
        properties:
          classFour:
            type: boolean
          classOne:
            type: boolean
          classThree:
            type: boolean
          classTwo:
            type: boolean
          damaged:
            type: boolean
          damagedDescription:
            type: string
          description:
            type: string
          hintText:
            type: string
          id:
            type: string
          itemTypes:
            $ref: '#/definitions/model.ItemsItemTypes'
          name:
            type: string
          picture:
            type: string
          regularShelfID:
            type: string
        type: object
      quantity:
        type: integer
      quickShelfID:
        type: string
      users:
        properties:
          email:
            type: string
          firstName:
            type: string
          id:
            type: string
          isActive:
            type: boolean
          jobTitle:
            type: string
          lastName:
            type: string
          phoneNumber:
            type: string
          profilePicture:
            type: string
          registrationAccepted:
            type: boolean
          registrationTime:
            type: string
          userTypeID:
            type: string
          username:
            type: string
        type: object
    type: object
  models.INVErrorMessage:
    properties:
      errorMessage:
        type: string
    type: object
  models.ItemCreateWithBook:
    properties:
      BaseQuantityInShelf:
        type: integer
      author:
        type: string
      classFour:
        type: boolean
      classOne:
        type: boolean
      classThree:
        type: boolean
      classTwo:
        type: boolean
      damaged:
        type: boolean
      damagedDesc:
        type: string
      description:
        type: string
      edition:
        type: string
      hintText:
        type: string
      isbn:
        type: string
      itemTypeName:
        $ref: '#/definitions/model.ItemsItemTypes'
      name:
        type: string
      publisher:
        type: string
      regularShelfId:
        type: string
    required:
    - BaseQuantityInShelf
    - author
    - edition
    - isbn
    - itemTypeName
    - name
    - publisher
    - regularShelfId
    type: object
  models.ItemCreateWithSetOfObject:
    properties:
      BaseQuantityInShelf:
        type: integer
      BrokenObjects:
        type: integer
      LostObjects:
        type: integer
      TotalObjects:
        type: integer
      UsefulObjects:
        type: integer
      classFour:
        type: boolean
      classOne:
        type: boolean
      classThree:
        type: boolean
      classTwo:
        type: boolean
      damaged:
        type: boolean
      damagedDesc:
        type: string
      description:
        type: string
      hintText:
        type: string
      itemTypeName:
        $ref: '#/definitions/model.ItemsItemTypes'
      name:
        type: string
      regularShelfId:
        type: string
    required:
    - BaseQuantityInShelf
    - itemTypeName
    - name
    - regularShelfId
    type: object
  models.ItemCreateWithSingleObject:
    properties:
      BaseQuantityInShelf:
        type: integer
      classFour:
        type: boolean
      classOne:
        type: boolean
      classThree:
        type: boolean
      classTwo:
        type: boolean
      damaged:
        type: boolean
      damagedDesc:
        type: string
      description:
        type: string
      hintText:
        type: string
      itemTypeName:
        $ref: '#/definitions/model.ItemsItemTypes'
      name:
        type: string
      regularShelfId:
        type: string
    required:
    - BaseQuantityInShelf
    - itemTypeName
    - name
    - regularShelfId
    type: object
  models.ItemMoveRequest:
    properties:
      itemID:
        type: string
      newUserID:
        type: string
    type: object
  models.ItemQuickShelfInsertODT:
    properties:
      itemID:
        type: string
      quantity:
        type: integer
      quickShelfID:
        type: string
    required:
    - itemID
    - quantity
    - quickShelfID
    type: object
  models.ItemQuickShelfRemoveSingleItem:
    properties:
      itemId:
        type: string
      quickShelfId:
        type: string
    type: object
  models.ItemReserveODT:
    properties:
      itemID:
        type: string
      quantity:
        type: integer
    required:
    - itemID
    - quantity
    type: object
  models.ItemUpdateWithBook:
    properties:
      QuantityInShelf:
        type: integer
      author:
        type: string
      classFour:
        type: boolean
      classOne:
        type: boolean
      classThree:
        type: boolean
      classTwo:
        type: boolean
      damaged:
        type: boolean
      damagedDescription:
        type: string
      description:
        type: string
      edition:
        type: string
      hintText:
        type: string
      id:
        type: string
      isbn:
        type: string
      itemID:
        type: string
      itemTypes:
        $ref: '#/definitions/model.ItemsItemTypes'
      name:
        type: string
      picture:
        type: string
      publisher:
        type: string
      regularShelfID:
        type: string
    type: object
  models.ItemUpdateWithSetsOfObjects:
    properties:
      QuantityInShelf:
        type: integer
      brokenObjects:
        type: integer
      classFour:
        type: boolean
      classOne:
        type: boolean
      classThree:
        type: boolean
      classTwo:
        type: boolean
      damaged:
        type: boolean
      damagedDescription:
        type: string
      description:
        type: string
      hintText:
        type: string
      id:
        type: string
      itemID:
        type: string
      itemTypes:
        $ref: '#/definitions/model.ItemsItemTypes'
      lostObjects:
        type: integer
      name:
        type: string
      picture:
        type: string
      regularShelfID:
        type: string
      totalObjects:
        type: integer
      usefulObjects:
        type: integer
    type: object
  models.ItemUpdateWithSingleObject:
    properties:
      QuantityInShelf:
        type: integer
      classFour:
        type: boolean
      classOne:
        type: boolean
      classThree:
        type: boolean
      classTwo:
        type: boolean
      damaged:
        type: boolean
      damagedDescription:
        type: string
      description:
        type: string
      hintText:
        type: string
      id:
        type: string
      itemID:
        type: string
      itemTypes:
        $ref: '#/definitions/model.ItemsItemTypes'
      name:
        type: string
      picture:
        type: string
      regularShelfID:
        type: string
    type: object
  models.ItemWithEverything:
    properties:
      classFour:
        type: boolean
      classOne:
        type: boolean
      classThree:
        type: boolean
      classTwo:
        type: boolean
      damaged:
        type: boolean
      damagedDescription:
        type: string
      description:
        type: string
      hintText:
        type: string
      id:
        type: string
      itemTypes:
        $ref: '#/definitions/model.ItemsItemTypes'
      keywords:
        items:
          properties:
            id:
              type: string
            keyword:
              type: string
          type: object
        type: array
      name:
        type: string
      picture:
        type: string
      quantityInShelf:
        type: integer
      regularShelfID:
        type: string
      reservations:
        items:
          properties:
            isCancelled:
              type: boolean
            itemID:
              type: string
            quantity:
              type: integer
            reservationDate:
              type: string
            reservationID:
              type: string
            timeFrom:
              type: string
            timeTo:
              type: string
            userID:
              type: string
            username:
              type: string
          type: object
        type: array
      subject:
        items:
          properties:
            description:
              type: string
            id:
              type: string
            name:
              type: string
          type: object
        type: array
      usersBorrowed:
        items:
          properties:
            borrowedByUserID:
              type: string
            borrowedByUserName:
              type: string
          type: object
        type: array
    type: object
  models.ItemWithKeywordName:
    properties:
      itemId:
        type: string
      keywordName:
        type: string
    type: object
  models.ItemWithSubjectName:
    properties:
      itemId:
        type: string
      subjectName:
        type: string
    type: object
  models.LoggedInResponse:
    properties:
      id:
        type: string
      loggedIn:
        type: boolean
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.LoginResponse:
    properties:
      refreshToken:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserWithTypeName'
    type: object
  models.PasswordReset:
    properties:
      password:
        type: string
    type: object
  models.PasswordResetEmail:
    properties:
      password:
        type: string
      userId:
        type: string
    type: object
  models.PicturePath:
    properties:
      path:
        type: string
    type: object
  models.QuickShelfCreate:
    properties:
      name:
        type: string
      roomId:
        type: string
    type: object
  models.QuickShelfWithItems:
    properties:
      items:
        items:
          properties:
            classFour:
              type: boolean
            classOne:
              type: boolean
            classThree:
              type: boolean
            classTwo:
              type: boolean
            damaged:
              type: boolean
            damagedDescription:
              type: string
            description:
              type: string
            hintText:
              type: string
            id:
              type: string
            itemTypes:
              $ref: '#/definitions/model.ItemsItemTypes'
            name:
              type: string
            picture:
              type: string
            regularShelfID:
              type: string
          type: object
        type: array
      quickShelfID:
        type: string
      quickShelfName:
        type: string
      roomID:
        type: string
    type: object
  models.RegistrationCode:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  models.RegistrationRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      jobtitle:
        type: string
      lastname:
        type: string
      password:
        type: string
      phonenumber:
        type: string
      username:
        type: string
      usertypename:
        type: string
    type: object
  models.ReservationCreateODT:
    properties:
      itemID:
        type: string
      quantity:
        type: integer
      timeFrom:
        type: string
      timeTo:
        type: string
    required:
    - itemID
    - quantity
    - timeFrom
    - timeTo
    type: object
  models.RoleIdODT:
    properties:
      roleID:
        type: string
      userID:
        type: string
    required:
    - roleID
    - userID
    type: object
  models.RoleODT:
    properties:
      roleName:
        type: string
    required:
    - roleName
    type: object
  models.RoomWithShelves:
    properties:
      id:
        type: string
      name:
        type: string
      shelves:
        items:
          properties:
            id:
              type: string
            name:
              type: string
            roomID:
              type: string
          type: object
        type: array
      warehouseID:
        type: string
    type: object
  models.RoomsODT:
    properties:
      name:
        type: string
      warehouseID:
        type: string
    type: object
  models.ShelveWithItems:
    properties:
      id:
        type: string
      items:
        items:
          properties:
            classFour:
              type: boolean
            classOne:
              type: boolean
            classThree:
              type: boolean
            classTwo:
              type: boolean
            damaged:
              type: boolean
            damagedDescription:
              type: string
            description:
              type: string
            hintText:
              type: string
            id:
              type: string
            itemTypes:
              $ref: '#/definitions/model.ItemsItemTypes'
            name:
              type: string
            picture:
              type: string
            quantity:
              type: integer
            regularShelfID:
              type: string
          type: object
        type: array
      name:
        type: string
      room:
        properties:
          id:
            type: string
          name:
            type: string
          warehouseID:
            type: string
        type: object
    type: object
  models.TransferRequestResponse:
    properties:
      transferRequestID:
        type: string
    type: object
  models.TransferRequestSelect:
    properties:
      isAccepted:
        type: boolean
      itemID:
        type: string
      requestDate:
        type: string
      targetUserID:
        type: string
      transferRequestID:
        type: string
      userID:
        type: string
    type: object
  models.UserWithTypeName:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      jobTitle:
        type: string
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      profilePicture:
        type: string
      registrationAccepted:
        type: boolean
      registrationTime:
        type: string
      roles:
        items:
          properties:
            id:
              type: string
            roleName:
              type: string
          type: object
        type: array
      userTypeName:
        type: string
      username:
        type: string
    type: object
  models.UserWithoutRoles:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      jobTitle:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      userTypeName:
        type: string
    type: object
  models.UserWithoutRolesODT:
    properties:
      email:
        type: string
      firstName:
        type: string
      jobTitle:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      userTypeName:
        type: string
    type: object
  models.Username:
    properties:
      username:
        type: string
    type: object
  models.Users:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      jobTitle:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      profilePicture:
        type: string
      roles:
        items:
          properties:
            id:
              type: string
            roleName:
              type: string
          type: object
        type: array
      userTypeName:
        type: string
      username:
        type: string
    type: object
  models.WarehouseWithRooms:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      rooms:
        items:
          properties:
            id:
              type: string
            name:
              type: string
            warehouseID:
              type: string
          type: object
        type: array
    type: object
  models.WarehousesODT:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/accept-registration/:userId:
    post:
      consumes:
      - application/json
      description: Accept User Registration Request
      parameters:
      - description: User ID from registration request
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Accept User Registration Request
      tags:
      - Users
  /auth/check-email:
    post:
      consumes:
      - application/json
      description: Check email
      parameters:
      - description: Email data
        in: body
        name: checkEmailRequest
        required: true
        schema:
          $ref: '#/definitions/models.CheckEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Check email
      tags:
      - Users
  /auth/check-username:
    post:
      consumes:
      - application/json
      description: Check username
      parameters:
      - description: Username data
        in: body
        name: checkUsernameRequest
        required: true
        schema:
          $ref: '#/definitions/models.CheckUsernameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Check username
      tags:
      - Users
  /auth/decline-registration/:userId:
    delete:
      consumes:
      - application/json
      description: Decline User Registration Request
      parameters:
      - description: User ID from registration request
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Decline User Registration Request
      tags:
      - Users
  /auth/generate-code:
    post:
      consumes:
      - application/json
      description: Generate User Registration Code - User gets email with code and
        link to website
      parameters:
      - description: Registration Code
        in: path
        name: code
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Generate User Registration Code
      tags:
      - Users
  /auth/is-admin:
    get:
      consumes:
      - application/json
      description: Is Admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Is Admin Check
      tags:
      - Users
  /auth/logged-in:
    get:
      consumes:
      - application/json
      description: Check if user is logged in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoggedInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Logged in
      tags:
      - Users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Login user
      tags:
      - Users
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user - return "Admin has been informed"
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Register user
      tags:
      - Users
  /auth/register/:code:
    post:
      consumes:
      - application/json
      description: Register user with code
      parameters:
      - description: Registration Code
        in: path
        name: code
        required: true
        type: string
      - description: Registration code
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegistrationCode'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Register user with code
      tags:
      - Users
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset Password
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.PasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Reset Password
      tags:
      - Users
  /email-forget-password:
    post:
      consumes:
      - application/json
      description: Forget Password => Reset | send email to user with link for reset
        password
      parameters:
      - description: Username
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Username'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Forget Password
      tags:
      - Users
  /items:
    get:
      consumes:
      - application/json
      description: Get items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ItemWithEverything'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get items
      tags:
      - Items
  /items-picture:
    post:
      consumes:
      - application/json
      description: Upload Img for Item. Form with enctype="multipart/form-data" <input
        type="file" name="file" /> & <input type="hidden" name="id" /> for item id
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Upload Img for Item
      tags:
      - Items
  /items-picture/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Picture from item and replace with ""
      parameters:
      - description: item id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete Img for Item
      tags:
      - Items
    get:
      consumes:
      - application/json
      description: Get ImagePath For Item
      parameters:
      - description: item id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PicturePath'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get ImagePath For Item
      tags:
      - Items
  /items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Item
      parameters:
      - description: Item Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete Item
      tags:
      - Items
    get:
      consumes:
      - application/json
      description: Get item by id
      parameters:
      - description: item id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ItemWithEverything'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get item by id
      tags:
      - Items
  /items/add-item-to-quick-shelf:
    post:
      consumes:
      - application/json
      description: Add item from user to Quick Shelf
      parameters:
      - description: ItemQuickShelfInsertODT model
        in: body
        name: ItemQuickShelfInsertODT
        required: true
        schema:
          $ref: '#/definitions/models.ItemQuickShelfInsertODT'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Add item to Quick Shelf
      tags:
      - Quick Shelf
  /items/add-keyword:
    post:
      consumes:
      - application/json
      description: Add keyword to item
      parameters:
      - description: ItemWithKeywordName model
        in: body
        name: item_keyword
        required: true
        schema:
          $ref: '#/definitions/models.ItemWithKeywordName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Add keyword to item
      tags:
      - Items
  /items/add-subject:
    post:
      consumes:
      - application/json
      description: Add Subject to item
      parameters:
      - description: ItemWithSubjectName model
        in: body
        name: item_keyword
        required: true
        schema:
          $ref: '#/definitions/models.ItemWithSubjectName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Add Subject to item
      tags:
      - Items
  /items/book:
    post:
      consumes:
      - application/json
      description: Create Item with book
      parameters:
      - description: ItemCreateWithBook model
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemCreateWithBook'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Item with book
      tags:
      - Items
    put:
      consumes:
      - application/json
      description: Update Item with Book
      parameters:
      - description: ItemUpdateWithBook model
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemUpdateWithBook'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update Item with Book
      tags:
      - Items
  /items/book/{id}:
    get:
      consumes:
      - application/json
      description: Get book by ItemId
      parameters:
      - description: item id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Books'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get book by ItemId
      tags:
      - Items
  /items/borrow:
    post:
      consumes:
      - application/json
      description: Borrow Item when logged-in
      parameters:
      - description: ItemReserveODT model
        in: body
        name: ItemReserveODT
        required: true
        schema:
          $ref: '#/definitions/models.ItemReserveODT'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Borrow Item
      tags:
      - Items
  /items/clear-quick-shelf/{id}:
    delete:
      consumes:
      - application/json
      description: Remove all items from quick shelf
      parameters:
      - description: quick shelf id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Clear all times from Quick shelf
      tags:
      - Quick Shelf
  /items/quick-shelf/{id}:
    get:
      consumes:
      - application/json
      description: Get all items in quick shelf
      parameters:
      - description: quick shelf id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetQuickShelf'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get Items in Quick shelf
      tags:
      - Quick Shelf
  /items/remove-item-to-quick-shelf:
    delete:
      consumes:
      - application/json
      description: You can only take all quantity of item from quick shelf to return
        it to regular shelf
      parameters:
      - description: ItemQuickShelfRemoveSingleItem model
        in: body
        name: ItemQuickShelfRemoveSingleItem
        required: true
        schema:
          $ref: '#/definitions/models.ItemQuickShelfRemoveSingleItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Bring item from Quick shelf to regular shelf
      tags:
      - Quick Shelf
  /items/remove-keyword:
    delete:
      consumes:
      - application/json
      description: Remove keyword to item
      parameters:
      - description: ItemWithKeywordName model
        in: body
        name: item_keyword
        required: true
        schema:
          $ref: '#/definitions/models.ItemWithKeywordName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Remove keyword to item
      tags:
      - Items
  /items/remove-subject:
    delete:
      consumes:
      - application/json
      description: Remove Subject to item
      parameters:
      - description: ItemWithSubjectName model
        in: body
        name: item_subject
        required: true
        schema:
          $ref: '#/definitions/models.ItemWithSubjectName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Remove Subject to item
      tags:
      - Items
  /items/reserve:
    post:
      consumes:
      - application/json
      description: Reserve Item when logged-in
      parameters:
      - description: ReservationCreateODT model
        in: body
        name: ReservationCreateODT
        required: true
        schema:
          $ref: '#/definitions/models.ReservationCreateODT'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Reserve Item
      tags:
      - Items
  /items/reserve-cancel/{id}:
    post:
      consumes:
      - application/json
      description: Cancel Reserve Item when logged-in
      parameters:
      - description: reservation id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Cancel Reserve Item
      tags:
      - Items
  /items/return/{id}:
    delete:
      consumes:
      - application/json
      description: Return Reserve Item when logged-in
      parameters:
      - description: item id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Return Reserve Item
      tags:
      - Items
  /items/set-of-objects:
    post:
      consumes:
      - application/json
      description: Create Item with sets of objects
      parameters:
      - description: ItemCreateWithSetOfObject model
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemCreateWithSetOfObject'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Item with sets of objects
      tags:
      - Items
    put:
      consumes:
      - application/json
      description: Update Item
      parameters:
      - description: ItemUpdateWithSetsOfObjects model
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemUpdateWithSetsOfObjects'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update Item
      tags:
      - Items
  /items/set-of-objects/{id}:
    get:
      consumes:
      - application/json
      description: Get SetsOfObjects by ItemId
      parameters:
      - description: item id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SetsOfObjects'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get SetsOfObjects by ItemId
      tags:
      - Items
  /items/single-object:
    post:
      consumes:
      - application/json
      description: Create Item with single object
      parameters:
      - description: ItemCreateWithSingleObject model
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemCreateWithSingleObject'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Item with single object
      tags:
      - Items
    put:
      consumes:
      - application/json
      description: Update Item with Single Object
      parameters:
      - description: ItemUpdateWithSingleObject model
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemUpdateWithSingleObject'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update Item with Single Object
      tags:
      - Items
  /items/single-object/{id}:
    get:
      consumes:
      - application/json
      description: Get SingleObject by ItemId
      parameters:
      - description: item id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SingleObject'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get SingleObject by ItemId
      tags:
      - Items
  /items/transfer-accept/{id}:
    post:
      consumes:
      - application/json
      description: Accept Transfer Request
      parameters:
      - description: transfer request id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Accept Transfer Request
      tags:
      - Items-Transfer
  /items/transfer-request:
    post:
      consumes:
      - application/json
      description: Create Transfer Request to move item from User A to User B
      parameters:
      - description: ItemMoveRequest model
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemMoveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TransferRequestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Transfer Request
      tags:
      - Items-Transfer
  /items/transfer-requests:
    get:
      consumes:
      - application/json
      description: Get Transfer Requests by UserId
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TransferRequestSelect'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get Transfer Requests by UserId
      tags:
      - Items-Transfer
  /keywords:
    get:
      consumes:
      - application/json
      description: Get Keywords
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Keywords'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get Keywords
      tags:
      - Keywords
    post:
      consumes:
      - application/json
      description: Create Keyword
      parameters:
      - description: KeywordODT model
        in: body
        name: keyword
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Keyword
      tags:
      - Keywords
    put:
      consumes:
      - application/json
      description: Update Keyword
      parameters:
      - description: Keyword model
        in: body
        name: keyword
        required: true
        schema:
          $ref: '#/definitions/model.Keywords'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update Keyword
      tags:
      - Keywords
  /keywords/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Keyword
      parameters:
      - description: Keyword ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete Keyword
      tags:
      - Keywords
  /quick-shelves:
    get:
      consumes:
      - application/json
      description: Get all Quick Shelves
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.QuickShelfWithItems'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get all Quick Shelves
      tags:
      - Quick Shelf
    post:
      consumes:
      - application/json
      description: Create Quick Shelf
      parameters:
      - description: QuickShelfCreate model
        in: body
        name: QuickShelfCreate
        required: true
        schema:
          $ref: '#/definitions/models.QuickShelfCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Quick Shelf
      tags:
      - Quick Shelf
    put:
      consumes:
      - application/json
      description: Update Quick Shelf
      parameters:
      - description: QuickShelves model
        in: body
        name: QuickShelfUpdate
        required: true
        schema:
          $ref: '#/definitions/model.QuickShelves'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update Quick Shelf
      tags:
      - Quick Shelf
  /quick-shelves/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Quick Shelf
      parameters:
      - description: quick shelf id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete Quick Shelf
      tags:
      - Quick Shelf
    get:
      consumes:
      - application/json
      description: Get Quick Shelf by Id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.QuickShelfWithItems'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get Quick Shelf by Id
      tags:
      - Quick Shelf
  /registration-requests:
    get:
      consumes:
      - application/json
      description: Get Registration Requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RegistrationRequests'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get Registration Requests
      tags:
      - Users
  /request-forgot-password:
    post:
      consumes:
      - application/json
      description: Request Password Reset in Database. UserId should be in URL of
        Frontend
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Request Password Reset
      tags:
      - Users
  /roles:
    delete:
      consumes:
      - application/json
      description: Delete Role
      parameters:
      - description: RoleODT model
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.RoleODT'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete Role
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: Get Roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Roles'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get Roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create Role
      parameters:
      - description: RoleODT model
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.RoleODT'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update Role
      parameters:
      - description: Roles model
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.Roles'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update Role
      tags:
      - Roles
  /rooms:
    get:
      consumes:
      - application/json
      description: Get rooms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Rooms'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get rooms
      tags:
      - Rooms
    post:
      consumes:
      - application/json
      description: Create Room
      parameters:
      - description: RoomsODT model
        in: body
        name: RoomsODT
        required: true
        schema:
          $ref: '#/definitions/models.RoomsODT'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Rooms'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Room
      tags:
      - Rooms
    put:
      consumes:
      - application/json
      description: Update room
      parameters:
      - description: Room model
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/model.Rooms'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Rooms'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update room
      tags:
      - Rooms
  /rooms-with-shelves:
    get:
      consumes:
      - application/json
      description: Get rooms with shelves
      parameters:
      - description: room id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoomWithShelves'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get rooms with shelves
      tags:
      - Rooms
  /rooms-with-shelves/{id}:
    get:
      consumes:
      - application/json
      description: Get room by id with shelves
      parameters:
      - description: Room id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoomWithShelves'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get room by id with shelves
      tags:
      - Rooms
  /rooms/{id}:
    delete:
      consumes:
      - application/json
      description: Delete room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete room
      tags:
      - Rooms
    get:
      consumes:
      - application/json
      description: Get room by id
      parameters:
      - description: Room id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Rooms'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get room by id
      tags:
      - Rooms
  /shelves:
    get:
      consumes:
      - application/json
      description: Get shelves
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Shelves'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get shelves
      tags:
      - Shelves
    post:
      consumes:
      - application/json
      description: Create Shelve
      parameters:
      - description: Shelve model
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/model.Rooms'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Shelves'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Shelve
      tags:
      - Shelves
    put:
      consumes:
      - application/json
      description: Update shelve
      parameters:
      - description: Shelves model
        in: body
        name: shelve
        required: true
        schema:
          $ref: '#/definitions/model.Shelves'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Shelves'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update shelve
      tags:
      - Shelves
  /shelves-with-items:
    get:
      consumes:
      - application/json
      description: Get shelves with items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ShelveWithItems'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get shelves with items
      tags:
      - Shelves
  /shelves-with-items/{id}:
    get:
      consumes:
      - application/json
      description: Get shelve by id with items
      parameters:
      - description: shelve id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ShelveWithItems'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get shelve by id with items
      tags:
      - Shelves
  /shelves/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Shelve
      parameters:
      - description: Shelve ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete Shelve
      tags:
      - Shelves
    get:
      consumes:
      - application/json
      description: Get shelve by id
      parameters:
      - description: Shelve id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Shelves'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get shelve by id
      tags:
      - Shelves
  /subjects:
    get:
      consumes:
      - application/json
      description: Get Subjects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Subjects'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get Subjects
      tags:
      - Subjects
    post:
      consumes:
      - application/json
      description: Create Subject
      parameters:
      - description: SubjectODT model
        in: body
        name: subject
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create Subject
      tags:
      - Subjects
    put:
      consumes:
      - application/json
      description: Update Subject
      parameters:
      - description: Subject model
        in: body
        name: subject
        required: true
        schema:
          $ref: '#/definitions/model.Subjects'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update Subject
      tags:
      - Subjects
  /subjects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Subject
      parameters:
      - description: Subject id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete Subject
      tags:
      - Subjects
  /user-roles/add-role:
    delete:
      consumes:
      - application/json
      description: Add Role to User
      parameters:
      - description: RoleIdODT model
        in: body
        name: RoleIdODT
        required: true
        schema:
          $ref: '#/definitions/models.RoleIdODT'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Add Role to User
      tags:
      - UserRoles
    post:
      consumes:
      - application/json
      description: Add Role to User
      parameters:
      - description: RoleIdODT model
        in: body
        name: RoleIdODT
        required: true
        schema:
          $ref: '#/definitions/models.RoleIdODT'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Add Role to User
      tags:
      - UserRoles
  /user-types:
    delete:
      consumes:
      - application/json
      description: Delete UserType
      parameters:
      - description: UserType id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete UserType
      tags:
      - UserTypes
    get:
      consumes:
      - application/json
      description: Get UserTypes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserTypes'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get UserTypes
      tags:
      - UserTypes
    post:
      consumes:
      - application/json
      description: Create UserType
      parameters:
      - description: UserTypeODT model
        in: body
        name: userType
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create UserType
      tags:
      - UserTypes
    put:
      consumes:
      - application/json
      description: Update UserType
      parameters:
      - description: UserType model
        in: body
        name: userType
        required: true
        schema:
          $ref: '#/definitions/model.UserTypes'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update UserType
      tags:
      - UserTypes
  /users:
    get:
      consumes:
      - application/json
      description: Get Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Users'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get Users
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserWithoutRolesODT'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update User
      tags:
      - Users
  /users-picture:
    delete:
      consumes:
      - application/json
      description: Delete Picture from User and replace with ""
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete Img for User
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get ImagePath For User Profile Picture
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PicturePath'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get ImagePath For User Profile Picture
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Upload Img for user. Form with enctype="multipart/form-data" <input
        type="file" name="file" /> & <input type="hidden" name="id" /> for item id
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Upload Img for user
      tags:
      - Users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get User By Id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get User By Id
      tags:
      - Users
  /users/admin:
    put:
      consumes:
      - application/json
      description: Update User as Admin
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserWithoutRoles'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update User as Admin
      tags:
      - Users
  /users/get-me:
    get:
      consumes:
      - application/json
      description: Get User Data when logged in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWithTypeName'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get User Data
      tags:
      - Users
  /warehouses:
    get:
      consumes:
      - application/json
      description: Get warehouses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Warehouses'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get warehouses
      tags:
      - Warehouses
    post:
      consumes:
      - application/json
      description: Create warehouse
      parameters:
      - description: WarehousesODT model
        in: body
        name: WarehousesODT
        required: true
        schema:
          $ref: '#/definitions/models.WarehousesODT'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Create warehouse
      tags:
      - Warehouses
    put:
      consumes:
      - application/json
      description: Update warehouse
      parameters:
      - description: Warehouses model
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/model.Warehouses'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Warehouses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Update warehouse
      tags:
      - Warehouses
  /warehouses-with-rooms:
    get:
      consumes:
      - application/json
      description: Get warehouse by id
      parameters:
      - description: Warehouse id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.WarehouseWithRooms'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get warehouse by id
      tags:
      - Warehouses
  /warehouses-with-rooms/{id}:
    get:
      consumes:
      - application/json
      description: Get warehouse by id
      parameters:
      - description: Warehouse id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.WarehouseWithRooms'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get warehouse by id
      tags:
      - Warehouses
  /warehouses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete warehouse
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Delete warehouse
      tags:
      - Warehouses
    get:
      consumes:
      - application/json
      description: Get warehouse by id
      parameters:
      - description: Warehouse id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Warehouses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.INVErrorMessage'
      summary: Get warehouse by id
      tags:
      - Warehouses
  /ws:
    get:
      description: 'IMPORTANT: WebSocket has to be called / created after Login.'
      responses:
        "200":
          description: OK
      summary: Websocket Handler - js -> new WebSocket("ws://localhost:8080/ws")
      tags:
      - Websocket
swagger: "2.0"
